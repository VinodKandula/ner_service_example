buildscript {
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
// apply plugin: 'checkstyle'
// apply plugin: 'findbugs'
// apply plugin: 'pmd'

/*
checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
}

findbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
*/
jar {
    baseName = 'ner-service'
    version =  '0.1.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("edu.stanford.nlp:stanford-corenlp:3.4.1")
    compile("edu.stanford.nlp:stanford-corenlp:3.4.1:models")
    compile("org.apache.opennlp:opennlp-tools:1.5.3")
    compile("org.apache.commons:commons-lang3:3.3.2")
    compile("commons-io:commons-io:2.4")
    compile("org.webjars:bootstrap:3.0.3")
    compile("org.webjars:jquery:2.0.3-1")
    testCompile("junit:junit")
}

def subdir = new File("opennlp_models")
if( !subdir.exists() ) {
   subdir.mkdirs()
}

def fi = [ "" ]

// http://opennlp.sourceforge.net/models-1.5/
def f = new File("opennlp_models","en-ner-person.bin")
if (!f.exists()) {
	println("Downloading OpenNLP NER Person model")
    new URL('http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin').withInputStream{ i -> f.withOutputStream{ it << i }}   
}

f = new File("opennlp_models","en-sent.bin")
if (!f.exists()) {
	println("Downloading OpenNLP NER Sentence model")
    new URL('http://opennlp.sourceforge.net/models-1.5/en-sent.bin').withInputStream{ i -> f.withOutputStream{ it << i }}   
}

f = new File("opennlp_models","en-token.bin")
if (!f.exists()) {
	println("Downloading OpenNLP NER Tokenizer model")
    new URL('http://opennlp.sourceforge.net/models-1.5/en-token.bin').withInputStream{ i -> f.withOutputStream{ it << i }}   
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
